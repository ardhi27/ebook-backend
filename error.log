Error: Endpoint tidak ditemukan
TypeError: Cannot read properties of undefined (reading 'username')
TypeError: Cannot read properties of undefined (reading 'username')
TypeError: Cannot read properties of undefined (reading 'username')
SyntaxError: Expected ',' or '}' after property value in JSON at position 60 (line 3 column 26)
PrismaClientKnownRequestError: 
Invalid `this.db.user.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/user/user.services.ts:47:37

  44 //Register
  45 async register(registerData: any) {
  46   //Before user register, the function will check first if the user is exist
→ 47   const user = await this.db.user.findFirst(
The table `user` does not exist in the current database.
SyntaxError: "[object Object]" is not valid JSON
SyntaxError: "[object Object]" is not valid JSON
SyntaxError: "[object Object]" is not valid JSON
SyntaxError: "[object Object]" is not valid JSON
SyntaxError: "[object Object]" is not valid JSON
SyntaxError: "[object Object]" is not valid JSON
SyntaxError: "[object Object]" is not valid JSON
SyntaxError: "[object Object]" is not valid JSON
SyntaxError: "[object Object]" is not valid JSON
SyntaxError: "[object Object]" is not valid JSON
SyntaxError: "[object Object]" is not valid JSON
SyntaxError: "[object Object]" is not valid JSON
SyntaxError: "[object Object]" is not valid JSON
PrismaClientKnownRequestError: 
Invalid `this.db.user.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/user/user.services.ts:47:37

  44 //Register
  45 async register(registerData: UserRegisterProps) {
  46   //Before user register, the function will check first if the user is exist
→ 47   const user = await this.db.user.findFirst(
The table `user` does not exist in the current database.
PrismaClientKnownRequestError: 
Invalid `this.db.user.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/user/user.services.ts:47:37

  44 //Register
  45 async register(registerData: UserRegisterProps) {
  46   //Before user register, the function will check first if the user is exist
→ 47   const user = await this.db.user.findFirst(
The table `user` does not exist in the current database.
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
PrismaClientKnownRequestError: 
Invalid `this.db.booksCategory.update()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/category.service.ts:70:33

  67   throw new HttpException(404, "Category not found");
  68 }
  69 
→ 70 await this.db.booksCategory.update(
An operation failed because it depends on one or more records that were required but not found. Record to update not found.
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
TypeError: Cannot convert object to primitive value
TypeError: Cannot read properties of undefined (reading 'authorName')
TypeError: Cannot read properties of undefined (reading 'authorName')
Error: Author already existed
Error: Endpoint tidak ditemukan
PrismaClientKnownRequestError: 
Invalid `this.db.booksCategory.update()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/category.service.ts:71:33

  68   throw new HttpException(404, "Category not found");
  69 }
  70 
→ 71 await this.db.booksCategory.update(
An operation failed because it depends on one or more records that were required but not found. Record to update not found.
PrismaClientKnownRequestError: 
Invalid `this.db.booksCategory.update()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/category.service.ts:71:33

  68   throw new HttpException(404, "Category not found");
  69 }
  70 
→ 71 await this.db.booksCategory.update(
An operation failed because it depends on one or more records that were required but not found. Record to update not found.
PrismaClientKnownRequestError: 
Invalid `this.db.booksCategory.update()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/category.service.ts:71:33

  68   throw new HttpException(404, "Category not found");
  69 }
  70 
→ 71 await this.db.booksCategory.update(
An operation failed because it depends on one or more records that were required but not found. Record to update not found.
TypeError: Cannot convert object to primitive value
TypeError: Cannot convert object to primitive value
TypeError: Cannot convert object to primitive value
TypeError: Cannot convert object to primitive value
TypeError: Cannot convert object to primitive value
TypeError: Cannot convert object to primitive value
TypeError: Cannot convert object to primitive value
TypeError: Cannot convert object to primitive value
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Unauthorized
Error: Endpoint tidak ditemukan
Error: User already exist
Error: User already exist
Error: User already exist
Error: User already exist
Error: User already exist
Error: User already exist
Error: User already exist
Error: User already exist
Error: User already exist
Error: User already exist
Error: Author must required
Error: data and hash arguments required
Error: data and hash arguments required
Error: User already exist
Error: User already exist
Error: User already exist
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Author must required
Error: User already exist
Error: username should not be empty,username must be a string
Error: username should not be empty
Error: username should not be empty
Error: username should not be empty
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: User already exist
Error: User not found
Error: User not found
Error: User not found
Error: User not found
Error: User not found
Error: User not found
Error: User not found
Error: User not found
Error: User not found
Error: User not found
Error: User not found
Error: User not found
Error: User not found
Error: User not found
Error: username should not be empty, password should not be empty
Error: User not found
Error: User not found
Error: User not found
Error: User not found
Error: User not found
Error: User not found
Error: Endpoint tidak ditemukan
Error: Unauthorized
Error: Unauthorized
Error: Endpoint tidak ditemukan
Error: User not found
Error: User not found
Error: Unauthorized
Error: Unauthorized
Error: Unauthorized
Error: Unauthorized
Error: Unauthorized
Error: Access Denied
Error: Access Denied
Error: Access Denied
Error: Access Denied
Error: Endpoint tidak ditemukan
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:78:47

  75 }
  76 
  77 async viewBooksById(booksId: number) {
→ 78   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:78:47

  75 }
  76 
  77 async viewBooksById(booksId: number) {
→ 78   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:78:47

  75 }
  76 
  77 async viewBooksById(booksId: number) {
→ 78   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:78:47

  75 }
  76 
  77 async viewBooksById(booksId: number) {
→ 78   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:78:47

  75 }
  76 
  77 async viewBooksById(booksId: number) {
→ 78   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:78:47

  75 }
  76 
  77 async viewBooksById(booksId: number) {
→ 78   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:78:47

  75 }
  76 
  77 async viewBooksById(booksId: number) {
→ 78   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:78:47

  75 }
  76 
  77 async viewBooksById(booksId: number) {
→ 78   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:78:47

  75 }
  76 
  77 async viewBooksById(booksId: number) {
→ 78   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:78:47

  75 }
  76 
  77 async viewBooksById(booksId: number) {
→ 78   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:78:47

  75 }
  76 
  77 async viewBooksById(booksId: number) {
→ 78   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:78:47

  75 }
  76 
  77 async viewBooksById(booksId: number) {
→ 78   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:78:47

  75 }
  76 
  77 async viewBooksById(booksId: number) {
→ 78   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:78:47

  75 }
  76 
  77 async viewBooksById(booksId: number) {
→ 78   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:78:47

  75 }
  76 
  77 async viewBooksById(booksId: number) {
→ 78   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:78:47

  75 }
  76 
  77 async viewBooksById(booksId: number) {
→ 78   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:78:47

  75 }
  76 
  77 async viewBooksById(booksId: number) {
→ 78   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
Error: Endpoint tidak ditemukan
PayloadTooLargeError: request entity too large
PayloadTooLargeError: request entity too large
PayloadTooLargeError: request entity too large
PayloadTooLargeError: request entity too large
Error: Malformed part header
Error: Malformed part header
Error: Malformed part header
Error: Malformed part header
Error: Malformed part header
Error: Malformed part header
Error: Malformed part header
Error: Malformed part header
Error: Malformed part header
Error: Malformed part header
Error: Malformed part header
Error: Malformed part header
Error: Malformed part header
Error: Malformed part header
Error: Malformed part header
Error: Malformed part header
Error: Malformed part header
Error: Malformed part header
Error: Malformed part header
Error: Malformed part header
Error: Malformed part header
Error: Malformed part header
Error: Malformed part header
Error: Malformed part header
Error: Malformed part header
Error: Malformed part header
PrismaClientValidationError: 
Invalid `this.db.books.create()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:23:42

  20   throw new HttpException(409, "Books already existed");
  21 }
  22 
→ 23 const newBooks = await this.db.books.create({
       data: {
         booksImage: "booksImage-1751352421379-314505617.jpg",
         booksDesc: "A",
         booksName: "A",
         authorId: "6",
                   ~~~
         categoryId: "2"
       }
     })

Argument `authorId`: Invalid value provided. Expected Int, provided String.
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:77:47

  74 }
  75 
  76 async viewBooksById(booksId: number) {
→ 77   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:77:47

  74 }
  75 
  76 async viewBooksById(booksId: number) {
→ 77   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:77:47

  74 }
  75 
  76 async viewBooksById(booksId: number) {
→ 77   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:77:47

  74 }
  75 
  76 async viewBooksById(booksId: number) {
→ 77   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:77:47

  74 }
  75 
  76 async viewBooksById(booksId: number) {
→ 77   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:77:47

  74 }
  75 
  76 async viewBooksById(booksId: number) {
→ 77   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:77:47

  74 }
  75 
  76 async viewBooksById(booksId: number) {
→ 77   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:77:47

  74 }
  75 
  76 async viewBooksById(booksId: number) {
→ 77   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:77:47

  74 }
  75 
  76 async viewBooksById(booksId: number) {
→ 77   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:77:47

  74 }
  75 
  76 async viewBooksById(booksId: number) {
→ 77   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
Error: Endpoint tidak ditemukan
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:77:47

  74 }
  75 
  76 async viewBooksById(booksId: number) {
→ 77   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:77:47

  74 }
  75 
  76 async viewBooksById(booksId: number) {
→ 77   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:77:47

  74 }
  75 
  76 async viewBooksById(booksId: number) {
→ 77   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:77:47

  74 }
  75 
  76 async viewBooksById(booksId: number) {
→ 77   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:77:47

  74 }
  75 
  76 async viewBooksById(booksId: number) {
→ 77   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:77:47

  74 }
  75 
  76 async viewBooksById(booksId: number) {
→ 77   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:77:47

  74 }
  75 
  76 async viewBooksById(booksId: number) {
→ 77   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:77:47

  74 }
  75 
  76 async viewBooksById(booksId: number) {
→ 77   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:77:47

  74 }
  75 
  76 async viewBooksById(booksId: number) {
→ 77   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:77:47

  74 }
  75 
  76 async viewBooksById(booksId: number) {
→ 77   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Unauthorized
Error: Unauthorized
Error: Endpoint tidak ditemukan
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:77:47

  74 }
  75 
  76 async viewBooksById(booksId: number) {
→ 77   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:77:47

  74 }
  75 
  76 async viewBooksById(booksId: number) {
→ 77   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:77:47

  74 }
  75 
  76 async viewBooksById(booksId: number) {
→ 77   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:77:47

  74 }
  75 
  76 async viewBooksById(booksId: number) {
→ 77   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:77:47

  74 }
  75 
  76 async viewBooksById(booksId: number) {
→ 77   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:77:47

  74 }
  75 
  76 async viewBooksById(booksId: number) {
→ 77   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:77:47

  74 }
  75 
  76 async viewBooksById(booksId: number) {
→ 77   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
PrismaClientValidationError: 
Invalid `this.db.books.findFirst()` invocation in
/Users/agungardhiyanda/Documents/GitHub/rental-books-backend/src/api/books/books.service.ts:77:47

  74 }
  75 
  76 async viewBooksById(booksId: number) {
→ 77   const isBookExisted = await this.db.books.findFirst({
         where: {
       +   booksId: {
       +     equals: Int | IntFieldRefInput,
       +     in: Int[],
       +     notIn: Int[],
       +     lt: Int | IntFieldRefInput,
       +     lte: Int | IntFieldRefInput,
       +     gt: Int | IntFieldRefInput,
       +     gte: Int | IntFieldRefInput,
       +     not: Int | NestedIntFilter
       +   }
         },
         include: {
           author: true,
           BooksCategory: true
         }
       })

Argument `booksId` is missing.
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: User not found
Error: User not found
Error: User not found
Error: User not found
Error: User not found
Error: User not found
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
Error: Endpoint tidak ditemukan
